# -*- coding: utf-8 -*-
"""notebookd6fca8a3d9

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/mohammadtawsif/notebookd6fca8a3d9.bf7b377d-c448-424e-9482-07fbae32057f.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250406/auto/storage/goog4_request%26X-Goog-Date%3D20250406T142630Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D03a0b11ad5fd43d60f09c765a80b3d042fde83fe5a65a307331eeb18d489e2e8cc56d6a4c0faf8ac337be4996b9f64145dd6adf08d941b56008a3245ff18c90cbe604597880f02a8b3a1fc1194ddf9d6481ec840c7e1799677b14c872c5b5661b1b8aa1cfd5b3c668368da7c373643348fdf2b707f5ed03c0bf757ea2760f17183d60434fc1e911b1cb69a3115aa721767038b589d9168292edb8c9de63265f07c5ffc17bf6cad313b9904120ad1017edf5aa284b800ebe1e6834d32e976fbb6e728374150487d6e996082a0c929364eb3d084aa95eec0fb47036e21fb4865294acd9821d8180fe4ac816801ce05b01d3ac671e5de8d63715f445e332d7e59b2
"""

import os
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from flask import Flask, request, jsonify, render_template
import joblib
from werkzeug.utils import secure_filename
from pathlib import Path

# Initialize Flask app
app = Flask(__name__)

# Configuration
MODEL_DIR = Path(__file__).parent  # Directory where app.py lives
UPLOAD_FOLDER = 'static/uploads'
ALLOWED_EXTENSIONS = {'jpg', 'jpeg', 'png'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Model file paths
MODEL_PATH = MODEL_DIR / "model.h5"
PREPROCESSOR_PATH = MODEL_DIR / "preprocessor.pkl"
LABEL_SCALER_PATH = MODEL_DIR / "label_scaler.pkl"

# Verify model files exist
print("Checking for model files...")
print(f"Model path: {MODEL_PATH}")
print(f"Preprocessor path: {PREPROCESSOR_PATH}")
print(f"Label scaler path: {LABEL_SCALER_PATH}")

if not MODEL_PATH.exists():
    raise FileNotFoundError(f"Model file not found at {MODEL_PATH}")
if not PREPROCESSOR_PATH.exists():
    raise FileNotFoundError(f"Preprocessor file not found at {PREPROCESSOR_PATH}")
if not LABEL_SCALER_PATH.exists():
    raise FileNotFoundError(f"Label scaler file not found at {LABEL_SCALER_PATH}")

# Load models with compatibility fixes
print("Loading model and preprocessing components...")
try:
    # Handle different TF versions for AdamW
    try:
        from tensorflow.keras.optimizers import AdamW
    except ImportError:
        from tensorflow.keras.optimizers.legacy import AdamW

    custom_objects = {
        'AdamW': AdamW,
        'CosineDecay': tf.keras.optimizers.schedules.CosineDecay
    }

    model = tf.keras.models.load_model(
        str(MODEL_PATH),
        custom_objects=custom_objects,
        compile=False
    )
    model.compile(optimizer='adam', loss='mse', metrics=['mae'])

    preprocessor = joblib.load(str(PREPROCESSOR_PATH))
    label_scaler = joblib.load(str(LABEL_SCALER_PATH))
    print("All components loaded successfully!")
except Exception as e:
    print(f"Error loading models: {str(e)}")
    raise e

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        try:
            # Check image
            if 'image' not in request.files:
                return jsonify({'error': 'No image uploaded'}), 400

            file = request.files['image']
            if file.filename == '':
                return jsonify({'error': 'No selected image'}), 400

            if not allowed_file(file.filename):
                return jsonify({'error': 'Invalid file type'}), 400

            # Save image
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)

            # Process image
            img = load_img(filepath, target_size=(128, 128))
            img_array = img_to_array(img) / 255.0
            img_array = np.expand_dims(img_array, axis=0)

            # Get form data
            data = request.form
            biomarkers = {
                'Height (cm)': float(data.get('height')),
                'Weight (kg)': float(data.get('weight')),
                'BMI': float(data.get('bmi')),
                'Blood Pressure (s/d)': data.get('blood_pressure'),
                'Blood Oxygen': float(data.get('blood_oxygen')),
                'Blood Sugar(mg/dl)': float(data.get('blood_sugar'))
            }

            # Process tabular data
            tabular_df = pd.DataFrame([biomarkers])
            tabular_processed = preprocessor.transform(tabular_df)
            if hasattr(tabular_processed, 'toarray'):
                tabular_processed = tabular_processed.toarray()
            tabular_processed = np.expand_dims(tabular_processed, axis=0)

            # Predict
            prediction = model.predict({
                'image_input': img_array,
                'tabular_input': tabular_processed.astype(np.float32)
            })

            predicted_age = label_scaler.inverse_transform(prediction)[0][0]

            # Cleanup
            if os.path.exists(filepath):
                os.remove(filepath)

            return jsonify({
                'predicted_age': round(predicted_age, 1),
                'status': 'success'
            })

        except Exception as e:
            # Cleanup if error occurred
            if 'filepath' in locals() and os.path.exists(filepath):
                os.remove(filepath)
            return jsonify({
                'error': str(e),
                'status': 'failed'
            }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

