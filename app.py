# -*- coding: utf-8 -*-
"""notebookd6fca8a3d9

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/mohammadtawsif/notebookd6fca8a3d9.01660111-416d-4ce7-95ac-1f63bfb4afa2.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250406/auto/storage/goog4_request%26X-Goog-Date%3D20250406T134820Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D5c77791807eac789a55216671b9a59c3cb76743af895e4a0ac4347f2a1ec1fc927f93ccd2dc01730088a6b94a50566c14297ecac8eea7359a9f9076f3fd424688eee34e7aef756f7778bfee45998d89e663943d23678705baaf9bd34118be778688718f601128993759a31c0446f5805fdc83193baeb28aeeddbe58e6bca211bdb8b9b84237b062325944846fd594d857649d4ed8b5ba8d41238886951a6158c99f428956c53a7ad82c1152cc2b261381dba40d46f4a75354f49c07093db805e076498f96a1b4c344c52142e998aa60be0e57170a1c6090677236d4788e24e860443429b8c69420c4b8ac7e7ccb79a5acb2d5782f97cda32c94e4385b639f063
"""

import os
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from flask import Flask, request, jsonify, render_template
import joblib
from werkzeug.utils import secure_filename

# Initialize Flask app
app = Flask(__name__)

# Configuration
UPLOAD_FOLDER = 'static/uploads'
ALLOWED_EXTENSIONS = {'jpg', 'jpeg', 'png'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Load models with compatibility fixes
print("Loading model and preprocessing components...")
try:
    # Load with custom objects
    with tf.keras.utils.custom_object_scope({
        'AdamW': tf.keras.optimizers.legacy.AdamW,
        'CosineDecay': tf.keras.optimizers.schedules.CosineDecay
    }):
        model = tf.keras.models.load_model('model.h5', compile=False)

    model.compile(optimizer='adam', loss='mse', metrics=['mae'])
    preprocessor = joblib.load('preprocessor.pkl')
    label_scaler = joblib.load('label_scaler.pkl')
    print("All components loaded successfully!")
except Exception as e:
    print(f"Error loading models: {str(e)}")
    raise e

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        try:
            # Check image
            if 'image' not in request.files:
                return jsonify({'error': 'No image uploaded'}), 400

            file = request.files['image']
            if file.filename == '':
                return jsonify({'error': 'No selected image'}), 400

            if not allowed_file(file.filename):
                return jsonify({'error': 'Invalid file type'}), 400

            # Save image
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)

            # Process image
            img = load_img(filepath, target_size=(128, 128))
            img_array = img_to_array(img) / 255.0
            img_array = np.expand_dims(img_array, axis=0)

            # Get form data
            data = request.form
            biomarkers = {
                'Height (cm)': float(data.get('height')),
                'Weight (kg)': float(data.get('weight')),
                'BMI': float(data.get('bmi')),
                'Blood Pressure (s/d)': data.get('blood_pressure'),
                'Blood Oxygen': float(data.get('blood_oxygen')),
                'Blood Sugar(mg/dl)': float(data.get('blood_sugar'))
            }

            # Process tabular data
            tabular_df = pd.DataFrame([biomarkers])
            tabular_processed = preprocessor.transform(tabular_df)
            if hasattr(tabular_processed, 'toarray'):
                tabular_processed = tabular_processed.toarray()
            tabular_processed = np.expand_dims(tabular_processed, axis=0)

            # Predict
            prediction = model.predict({
                'image_input': img_array,
                'tabular_input': tabular_processed.astype(np.float32)
            })

            predicted_age = label_scaler.inverse_transform(prediction)[0][0]

            # Cleanup
            os.remove(filepath)

            return jsonify({
                'predicted_age': round(predicted_age, 1),
                'status': 'success'
            })

        except Exception as e:
            return jsonify({
                'error': str(e),
                'status': 'failed'
            }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

