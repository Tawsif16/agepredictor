# -*- coding: utf-8 -*-
"""notebookd6fca8a3d9

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/mohammadtawsif/notebookd6fca8a3d9.be400227-c345-4a7a-9092-ec5bf20e1a12.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250406/auto/storage/goog4_request%26X-Goog-Date%3D20250406T135704Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D4a83b42660bd68f242a534ce53a987e20f4999f3fe513c4601954c3bd24092d589517fc8594fdd1b20617de226a2e8ed31590a4e8a0480b0625a86295cc9982f062ee5f89c6f4d204d13b78227e3bf18208fcbccf45780508e2017c6ba8c714143cbe66f7355ea013e1df014dabc33ff71730189b52202c778a8b7a3205182b9c70a2fe49ae114c4560cd0850b58c5e1729c6f0fd9d072a71b80d3efd28398a4e2fd36aadb247b709072bd1bea7c6fe8cd00f113be35d082e4300c52e38eb75001dc5066f0817ba5af37d8efea6c5e22b6bc2b36d47e7eab0e880c297147b0f7f25cd84aa29210b24d50f16c53d15e738ab4d71ae5629ff11fa4f9f1d5420255
"""

import os
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from flask import Flask, request, jsonify, render_template
import joblib
from werkzeug.utils import secure_filename

# Initialize Flask app
app = Flask(__name__)

# Configuration
UPLOAD_FOLDER = 'static/uploads'
ALLOWED_EXTENSIONS = {'jpg', 'jpeg', 'png'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Load models with updated compatibility
print("Loading model and preprocessing components...")
try:
    # Try new location first, then fallback to legacy
    try:
        from tensorflow.keras.optimizers import AdamW
    except ImportError:
        from tensorflow.keras.optimizers.legacy import AdamW

    # Load model with custom objects
    custom_objects = {
        'AdamW': AdamW,
        'CosineDecay': tf.keras.optimizers.schedules.CosineDecay
    }

    model = tf.keras.models.load_model('model.h5', custom_objects=custom_objects, compile=False)
    model.compile(optimizer='adam', loss='mse', metrics=['mae'])

    preprocessor = joblib.load('preprocessor.pkl')
    label_scaler = joblib.load('label_scaler.pkl')
    print("All components loaded successfully!")
except Exception as e:
    print(f"Error loading models: {str(e)}")
    raise e

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        try:
            # Check image
            if 'image' not in request.files:
                return jsonify({'error': 'No image uploaded'}), 400

            file = request.files['image']
            if file.filename == '':
                return jsonify({'error': 'No selected image'}), 400

            if not allowed_file(file.filename):
                return jsonify({'error': 'Invalid file type'}), 400

            # Save image
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)

            # Process image
            img = load_img(filepath, target_size=(128, 128))
            img_array = img_to_array(img) / 255.0
            img_array = np.expand_dims(img_array, axis=0)

            # Get form data
            data = request.form
            biomarkers = {
                'Height (cm)': float(data.get('height')),
                'Weight (kg)': float(data.get('weight')),
                'BMI': float(data.get('bmi')),
                'Blood Pressure (s/d)': data.get('blood_pressure'),
                'Blood Oxygen': float(data.get('blood_oxygen')),
                'Blood Sugar(mg/dl)': float(data.get('blood_sugar'))
            }

            # Process tabular data
            tabular_df = pd.DataFrame([biomarkers])
            tabular_processed = preprocessor.transform(tabular_df)
            if hasattr(tabular_processed, 'toarray'):
                tabular_processed = tabular_processed.toarray()
            tabular_processed = np.expand_dims(tabular_processed, axis=0)

            # Predict
            prediction = model.predict({
                'image_input': img_array,
                'tabular_input': tabular_processed.astype(np.float32)
            })

            predicted_age = label_scaler.inverse_transform(prediction)[0][0]

            # Cleanup
            os.remove(filepath)

            return jsonify({
                'predicted_age': round(predicted_age, 1),
                'status': 'success'
            })

        except Exception as e:
            return jsonify({
                'error': str(e),
                'status': 'failed'
            }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

