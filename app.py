# -*- coding: utf-8 -*-
"""notebookd6fca8a3d9

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/mohammadtawsif/notebookd6fca8a3d9.2d560ecb-959e-47a2-83a2-52e4ae758ff7.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250405/auto/storage/goog4_request%26X-Goog-Date%3D20250405T094401Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D519506daaeb490ab8b91321e2380cfe91c343d68593fbc79157556af040d5870dcb3d8ee38fcbc399b91a4060387dc320f0e212533bfe127c9c76a2ddaf7979fdc3182cfb2eb9d37057d2a416e9316788df44b9c9819fe2f208b3d8d8f3698da1e62385003ff9d4c52469ab761ce55a05a868c566afa64e0ef6994ecbfe015bea8d7f2d8ef9905663a71222bb4d4441baa89858c413bcca6c0ebe62c3095c201e954d742e7cadbc2f37726b5be0c8399a138086d5ab43b9585dc2c992c413a30d1851446e9b5f44fe1a4e1357bf12dc45eebbb275b436ff56278cbd67f77dee5c8101bedd8fdd8d7c05b6842bdffc2a881aa2484c85dbebe9aaa1b053c390ded
"""

# app.py
pip install flask tensorflow pandas scikit-learn pillow
from flask import Flask, request, jsonify
import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import joblib
import pandas as pd
import os
from werkzeug.utils import secure_filename

app = Flask(__name__)

# Load models
model = tf.keras.models.load_model('model.h5')
preprocessor = joblib.load('preprocessor.pkl')
label_scaler = joblib.load('label_scaler.pkl')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Get form data
        data = request.form
        image = request.files['image']

        # Process image
        img = load_img(image, target_size=(128, 128))
        img_array = img_to_array(img)/255.0
        img_array = np.expand_dims(img_array, axis=0)

        # Process biomarkers
        biomarkers = {
            'Height (cm)': float(data['height']),
            'Weight (kg)': float(data['weight']),
            'BMI': float(data['bmi']),
            'Blood Pressure (s/d)': data['blood_pressure'],
            'Blood Oxygen': float(data['blood_oxygen']),
            'Blood Sugar(mg/dl)': float(data['blood_sugar'])
        }

        tabular_df = pd.DataFrame([biomarkers])
        tabular_processed = preprocessor.transform(tabular_df)

        # Make prediction
        prediction = model.predict({
            'image_input': img_array,
            'tabular_input': tabular_processed.astype(np.float32)
        })

        predicted_age = label_scaler.inverse_transform(prediction)[0][0]

        return jsonify({
            'predicted_age': round(predicted_age, 1),
            'status': 'success'
        })

    except Exception as e:
        return jsonify({'error': str(e), 'status': 'failed'})

if __name__ == '__main__':
    app.run(debug=True)

